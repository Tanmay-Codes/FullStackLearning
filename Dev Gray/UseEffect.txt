******UseEffect**********

Important point of the UseEffect :


1. It needed to be imported from the react

import { useState, useEffect } from 'react';


useEffect is defined with a function inside it

useEffect(()=> console.log('render'))


2. It is important to understand that this UseEffect is run at every rendered.

3. Now since we dont want to let the useEffect to run at every render of the components so we
look up at the useEffect dependencies, so for example we use an empty array [] in the useEffect
this useEffect will only run at the load time.



useEffect(()=> console.log('render'), []);

***whats happening here is the useEffect is dependent on this [] empty array, so this array
since is not changing therefore the useEffect is only run once i.e, at load time.

***Now we can pass any dependency to this useEffect so when that dependency run is finished
only then the useEffect will be runned. 



4. There is a async behaviour of the useEffect

console.log("before useEffect");

useEffect(()=> console.log('inside useEffect'), []);

console.log("after useEffect");

****output****

before useEffect
after useEffect
inside useEffect


//So as output suggest the inside useEffect is printed after the after useEffect.

here is one example of usecase of useEffect in making a ToDO list

************************************************************

import {useState} from "react";
import Header from "./Components/Header";
import AddItems from "./Components/AddItems";
import SearchItem from "./Components/SearchItem";
import Content from "./Components/Content";
import Footer from "./Components/Footer";
import { useEffect } from "react";
function App() {

// Declaring the State Hook here
const [items, setItems] = useState(JSON.parse(localStorage.getItem('goallist')) || []);
const [newItem, setnewItem] = useState('')
const [search, setsearch] = useState('')

*********************************USE EFFECT HERE*********************************
useEffect(()=>{
  localStorage.setItem("goallist", JSON.stringify(items));
}, [items])

************************************************************************************
const additem = (nitem)=>{
  const updatelist = [...items, {
    id: items.length ? items[items.length -1].id + 1 : 1,
    checked: false,
    item: nitem
  }] 
 setItems(updatelist);
}
  
const handleSubmit = (e)=>{
  e.preventDefault();
  if (!newItem) return;
  setnewItem('');
  additem(newItem)
}

// Declaring the Check Item function here
const handleChecked = (id) => {
  const listItems = items.map((item) =>
    item.id === id ? { ...item, checked: !item.checked } : item
  );
  setItems(listItems);
};

// Declaring the Delete Item function here
const handleDelete = (id) => {
  const listItems = items.filter((item) => item.id != id);
  setItems(listItems);
};
  return (
    <div className="App">
      <Header />
      <AddItems 
      handleSubmit={handleSubmit}
      setnewItem = {setnewItem}
      newItem = {newItem}
      />
      <SearchItem 
      search = {search}
      setsearch = {setsearch}
      />
      <Content
      // here item.filter is used to filter out the state of search item shows in the search
      items = {items.filter(item=> ((item.item).toLowerCase()).includes(search.toLocaleLowerCase()))}
      handleChecked= {handleChecked}
      handleDelete = {handleDelete}
      />
      <Footer 
      n = {items.length}
      />
      
    </div>
  );
}

export default App;




notice the difference we pull from local storage!
here is

JSON.parse(localstorage.getItem("itemname")) it is to pull out items from nothing

localstorage.setItem("itemname", JSON.stringif(array/list here) it is to save item to the local storage


